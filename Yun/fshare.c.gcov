        -:    0:Source:/home/s21900549/24-Fshare/Yun/fshare.c
        -:    0:Graph:./CMakeFiles/fshare.dir/fshare.c.gcno
        -:    0:Data:./CMakeFiles/fshare.dir/fshare.c.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/*  Client : request to the server and receive the response message
        -:    2:    $ ./fshare 192.168.0.1:8080 list
        -:    3:
        -:    4:    Server 로 request :
        -:    5:        - list          : send "list" + 0 + NULL
        -:    6:        - get hello.txt : send "get" + strlen("hello.txt") + NULL
        -:    7:        - put hi.txt    : send "put" + sizeof("hi.txt") + content of "hi.txt"
        -:    8:
        -:    9:    Server 로부터 다음과 같은 response message 를 받음 :
        -:   10:        - list : receives files 의 directory 안의 내용 > print
        -:   11:        - get hello.txt
        -:   12:            - receives 오류 없음 > 끝
        -:   13:            - receives 오류 있음 > 오류 메시지 print
        -:   14:        - put hi.txt
        -:   15:            - receives 오류 없음 > 끝
        -:   16:            - receives 오류 있음 > 오류 메시지 print
        -:   17:*/ 
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:#include <stdlib.h>
        -:   21:#include <string.h>
        -:   22:#include <unistd.h>
        -:   23:#include <sys/socket.h>
        -:   24:#include <netinet/in.h>
        -:   25:#include <arpa/inet.h>
        -:   26:#include <fcntl.h>
        -:   27:#include <dirent.h>
        -:   28:#include <sys/stat.h>
        -:   29:#include <libgen.h>
        -:   30:#include <errno.h>
        -:   31:#include "fshare.h"
        -:   32:
        -:   33:int test_int = 1;
        -:   34:
        -:   35:char * cmd_str[N_cmd] = {
        -:   36:	"list",
        -:   37:    "get",
        -:   38:    "put"
        -:   39:} ;
        -:   40:
        -:   41:char * recv_payload = 0x0 ;
        -:   42:char * send_payload = 0x0 ;
        -:   43:
        -:   44:client_header ch ;
        -:   45:server_header sh ;
        -:   46:
        -:   47:char * hostip = 0x0 ;
        -:   48:int port_num = -1 ;
        -:   49:char * file_path = 0x0 ;
        -:   50:char * dest_dir = 0x0 ;
        -:   51:
        -:   52:const int buf_size = 512 ;
        -:   53:
        -:   54:int 
function send_bytes called 0 returned 0% blocks executed 0%
    #####:   55:send_bytes(int fd, char * buf, size_t len)
        -:   56:{
        -:   57:    // return 0 if all given bytes are succesfully sent
        -:   58:    // return 1 otherwise
        -:   59:
    #####:   60:    char * p = buf ;
    #####:   61:    size_t acc = 0 ;
        -:   62:
    #####:   63:    while (acc < len)
branch  0 never executed
branch  1 never executed
        -:   64:    {
        -:   65:        size_t sent ;
    #####:   66:        sent = send(fd, p, len - acc, 0) ;
call    0 never executed
    #####:   67:        if (sent == -1)
branch  0 never executed
branch  1 never executed
    #####:   68:                return 1 ;
    #####:   69:        p += sent ;
    #####:   70:        acc += sent ;
        -:   71:    }
    #####:   72:    return 0 ;
        -:   73:}
        -:   74:
        -:   75:cmd
function get_cmd_code called 2 returned 100% blocks executed 86%
        2:   76:get_cmd_code (char * s)
        -:   77:{
        6:   78:	for (int i = 0 ; i < N_cmd ; i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        6:   79:	 	if (strcmp(s, cmd_str[i]) == 0) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   80:			return i ;
        -:   81:		}
        -:   82:	}
    #####:   83:	return N_cmd ;
        -:   84:}
        -:   85:
        -:   86:void 
function print_usage called 1 returned 100% blocks executed 100%
        1:   87:print_usage() 
        -:   88:{
        1:   89:    printf("Usage: ./fshare <host-ip:port-number> <command> <filepath (if necessary)>\n");
call    0 returned 100%
        1:   90:}
        -:   91:
        -:   92:void
function get_option called 3 returned 100% blocks executed 59%
        3:   93:get_option(int argc, char * argv[])
        -:   94:{
        -:   95:    // parse the command-line argument and assign values
        -:   96:
        -:   97:    // fshare <host-ip:port-num> <command> <file_path> <directory-name>
        -:   98:    // fshare 192.168.0.1:8080 list
        -:   99:    // fshare 192.168.0.1:8080 get hello.txt ./dest
        -:  100:    // fshare 192.168.0.1:8080 put hi.txt
        -:  101:    int option ;
        6:  102:    while ((option = getopt(argc, argv, "h")) != -1) { 
call    0 returned 100%
branch  1 taken 33%
branch  2 taken 67% (fallthrough)
        1:  103:        printf("here\n");
call    0 returned 100%
        1:  104:        switch (option) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
        1:  105:            case 'h':
        1:  106:                print_usage() ;
call    0 returned 100%
        1:  107:                return ;
    #####:  108:            case '?':
    #####:  109:                fprintf(stderr, "Unknown option -%c.\n", optopt) ;
call    0 never executed
    #####:  110:                return ;
        -:  111:        }
        -:  112:    }
        -:  113:
        2:  114:    if (argc < 3) { // at least two argument is required : <host-ip:port-number> <command>
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  115:        print_usage();
call    0 never executed
    #####:  116:        return;
        -:  117:    }
        -:  118:    
        -:  119:    // extract IP address and port from <host-ip:port-number>
        2:  120:    char * host_port = argv[optind] ; 
        2:  121:    char * colon_ptr = strchr(host_port, ':') ; // find the position of the colon
        2:  122:    if (colon_ptr == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  123:        fprintf(stderr, "Invalid format for <host-ip:port-number>.\n") ;
call    0 never executed
    #####:  124:        print_usage() ;
call    0 never executed
    #####:  125:        return ;
        -:  126:    }
        2:  127:    * colon_ptr = '\0'; // replace the colon with null-terminator to separate IP and port strings
        -:  128:
        -:  129:    // get host IP
        2:  130:    hostip = strdup(host_port) ;
        -:  131:    
        -:  132:    // get port number
        2:  133:    port_num = atoi(colon_ptr + 1);
        2:  134:    if (port_num < 1023 || port_num > 49151) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  135:        fprintf(stderr, "Range of port number should be [1024, 49150]\n") ;
call    0 never executed
    #####:  136:        return ;
        -:  137:    }
        -:  138:    // get and set user-command
        2:  139:    char * user_command = argv[optind + 1] ; 
        2:  140:    if ((ch.command = get_cmd_code(user_command)) == N_cmd) { // set command on the header
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  141:        fprintf(stderr, "Wrong command.\n") ;
call    0 never executed
    #####:  142:        return ;
        -:  143:    }
        -:  144:    // set file path and destination directory 
        2:  145:    if (ch.command == get || ch.command == put) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  146:        file_path = (char *) malloc(strlen(argv[optind + 2]) + 1) ;
        2:  147:        if (file_path == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  148:            fprintf(stderr, "Failed to allocate a memory...\n") ;
call    0 never executed
    #####:  149:            return ;
        -:  150:        }
        2:  151:        strcpy(file_path, argv[optind + 2]) ;
        2:  152:        file_path[strlen(argv[optind + 2])] = '\0' ;
        -:  153:        
        2:  154:        dest_dir = (char *) malloc(strlen(argv[optind + 3]) + 1) ;
        2:  155:        if (dest_dir == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  156:            fprintf(stderr, "Failed to allocate a memory...\n") ;
call    0 never executed
    #####:  157:            return ;
        -:  158:        }
        2:  159:        strcpy(dest_dir, argv[optind + 3]) ;
        2:  160:        dest_dir[strlen(argv[optind + 3])] = '\0' ;
        -:  161:    }
        -:  162:    
        -:  163:    // check if options were provided
        2:  164:    if (hostip == NULL || port_num == -1 || user_command == NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  165:        print_usage() ;
call    0 never executed
    #####:  166:        return ;
        -:  167:    }
        -:  168:
        2:  169:    if (ch.command == get || ch.command == put) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  170:        if (file_path == NULL || dest_dir == NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  171:            print_usage() ;
call    0 never executed
    #####:  172:            return ;
        -:  173:        }
        -:  174:    }
        -:  175:
        2:  176:    return ;
        -:  177:}
        -:  178:
        -:  179:char *
function parse_directory called 0 returned 0% blocks executed 0%
    #####:  180:parse_directory(char * toparse) 
        -:  181:{
    #####:  182:    char * parsed_dir = dirname(toparse) ;
call    0 never executed
    #####:  183:    return parsed_dir ;
        -:  184:}
        -:  185:
        -:  186:void 
function request called 3 returned 100% blocks executed 61%
        3:  187:request(const int sock_fd)
        -:  188:{
        -:  189:    /*  TASK : header + payload 설정하고 server 에 send
        -:  190:        - list                : send "list" + 0 + 0 + NULL
        -:  191:        - get a/hello.txt b/c : send "get" + strlen("a/hello.txt") + strlen(b/c) + a/hello.txt
        -:  192:        - put x/hi.txt y/z    : send "put" + sizeof("x/hi.txt") + content of "x/hi.txt"
        -:  193:    */
        -:  194:    int sent ;
        3:  195:    int sent_check = sizeof(ch) ;
        3:  196:    char * chp = (char *) &ch ;
        -:  197:    char * ptr ;
        -:  198:
        3:  199:    if (ch.command == list) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  200:        ch.payload_size = 0 ;
        1:  201:        ch.src_path_len = 0 ;
        1:  202:        ch.des_path_len = 0 ;
        3:  203:        while (sent_check > 0 && (sent = send(sock_fd, chp, sent_check, 0)) > 0) { // send header
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
        1:  204:            chp += sent ;
        1:  205:            sent_check -= sent ;
        -:  206:        } 
        1:  207:        printf(">> List request completed!\n") ;
call    0 returned 100%
        2:  208:    } else if (ch.command == get) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  209:        ch.src_path_len = strlen(file_path) ;
    #####:  210:        ch.des_path_len = 0 ;
    #####:  211:        ch.payload_size = ch.src_path_len + ch.des_path_len ;
    #####:  212:        while (sent_check > 0 && (sent = send(sock_fd, &ch, sent_check, 0)) > 0) { // send header
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  213:            chp += sent ;
    #####:  214:            sent_check -= sent ;
        -:  215:        }
    #####:  216:        sent_check = ch.payload_size ;
    #####:  217:        ptr = file_path ;
    #####:  218:        while (sent_check > 0 && (sent = send(sock_fd, file_path, sent_check, 0)) > 0) { // send payload
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  219:            ptr += sent ;
    #####:  220:            sent_check -= sent ;
        -:  221:        }
    #####:  222:        printf(">> Get request completed!\n") ;
call    0 never executed
        -:  223:    } else { // ch.command == put
        2:  224:        ch.src_path_len = strlen(file_path) ;
        2:  225:        ch.des_path_len = strlen(dest_dir) ;
        -:  226:
        -:  227:        struct stat filestat ;
        2:  228:        if (lstat(file_path, &filestat) == -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  229:            fprintf(stderr, "Failed to get a file status of %s\n", file_path) ;
call    0 never executed
    #####:  230:            return ;
        -:  231:        }
        2:  232:        ch.payload_size = ch.src_path_len + ch.des_path_len + filestat.st_size ;
        -:  233:        
        2:  234:        FILE * fp = fopen(file_path, "rb") ;
call    0 returned 100%
        2:  235:        if (fp == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  236:            fprintf(stderr, "Failed to open a file %s\n", file_path) ;
call    0 never executed
    #####:  237:            return ;
        -:  238:        }
        -:  239:        
        6:  240:        while (sent_check > 0 && 0 < (sent = send(sock_fd, &ch, sent_check, 0))) { // send header
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
        2:  241:            chp += sent ;
        2:  242:            sent_check -= sent ;
        -:  243:        } 
        -:  244:
        2:  245:        send_payload = (char *) malloc(ch.src_path_len + ch.des_path_len + 1) ;
        2:  246:        strcpy(send_payload, file_path) ;
        2:  247:        strcat(send_payload, dest_dir) ;
        -:  248:
        2:  249:        ptr = send_payload ;
        2:  250:        sent_check = ch.src_path_len + ch.src_path_len ;
        6:  251:        while (sent_check > 0 && 0 < (sent = send(sock_fd, send_payload, sent_check, 0))) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
        2:  252:            ptr += sent ;
        2:  253:            sent_check -= sent ;
        -:  254:        }
        -:  255:
        2:  256:        char buf[buf_size] ;
        -:  257:        int read_size ;
       38:  258:        while ((read_size = fread(buf, 1, buf_size, fp)) > 0) {
call    0 returned 100%
branch  1 taken 94%
branch  2 taken 6% (fallthrough)
       34:  259:            if ((sent = send(sock_fd, buf, read_size, 0)) < 0) { // send payload
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  260:                perror("send error file data : ") ;
call    0 never executed
    #####:  261:                fclose(fp) ;
call    0 never executed
    #####:  262:                return ;
        -:  263:            }
        -:  264:        }
        -:  265:
        2:  266:        free(send_payload) ;
        2:  267:        fclose(fp) ;
call    0 returned 100%
        2:  268:        printf(">> Put request completed!\n") ;
call    0 returned 100%
        -:  269:    }
        -:  270:}
        -:  271:
        -:  272:void
function receive_list_response called 0 returned 0% blocks executed 0%
    #####:  273:receive_list_response(int sock_fd) 
        -:  274:{
        -:  275:    // receiving can be done multiple times
        -:  276:    int received ;
    #####:  277:    do {
    #####:  278:        if ((received = recv(sock_fd, &sh, sizeof(sh), 0)) != sizeof(sh)) { // receive server header
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  279:            if (received == 0) {
branch  0 never executed
branch  1 never executed
    #####:  280:                continue ;
        -:  281:            }
    #####:  282:            perror("receive error") ;
call    0 never executed
    #####:  283:            return ;
        -:  284:        }
    #####:  285:        if (sh.is_error != 0) {
branch  0 never executed
branch  1 never executed
    #####:  286:            perror("response error") ;
call    0 never executed
    #####:  287:            return ;
        -:  288:        }
        -:  289:        
    #####:  290:        char buf[buf_size] ;
    #####:  291:        int len = 0 ;
        -:  292:
    #####:  293:        if (sh.payload_size <= buf_size) {
branch  0 never executed
branch  1 never executed
    #####:  294:            if ((received = recv(sock_fd, buf, sh.payload_size, 0)) != sh.payload_size) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  295:                perror("receive error 2") ;
call    0 never executed
    #####:  296:                return ;
        -:  297:            }
    #####:  298:            buf[sh.payload_size] = '\0' ;
    #####:  299:            printf("> %s\n", buf) ;
call    0 never executed
        -:  300:        } else {
    #####:  301:            while ((received = recv(sock_fd, buf, buf_size, 0)) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  302:                if (recv_payload == 0x0) {
branch  0 never executed
branch  1 never executed
    #####:  303:                    recv_payload = (char *) malloc(received) ;
    #####:  304:                    memcpy(recv_payload, buf, received) ;
    #####:  305:                    len = received ;
        -:  306:                } else {
    #####:  307:                    recv_payload = realloc(recv_payload, len + received) ;
    #####:  308:                    memcpy(recv_payload + len, buf, received) ;
    #####:  309:                    len += received ;
        -:  310:                }
        -:  311:            }
    #####:  312:            buf[ch.payload_size] = '\0' ;
    #####:  313:            printf("> %s\n", recv_payload) ;
call    0 never executed
    #####:  314:            free(recv_payload) ;
        -:  315:        }
    #####:  316:    } while (received > 0) ;
branch  0 never executed
branch  1 never executed
        -:  317:}
        -:  318:
        -:  319:void
function make_directory called 0 returned 0% blocks executed 0%
    #####:  320:make_directory(char * towrite) 
        -:  321:{
    #####:  322:    char * temp = (char *) malloc(strlen(towrite) + 1) ;
        -:  323:
    #####:  324:    for (int i = 0; i <= strlen(towrite); i++) {
branch  0 never executed
branch  1 never executed
    #####:  325:        if (towrite[i] == '/') {
branch  0 never executed
branch  1 never executed
    #####:  326:            strncpy(temp, towrite, i) ;
    #####:  327:            temp[i] = '\0' ;
    #####:  328:            printf("dir : %s\n", temp) ; 
call    0 never executed
        -:  329:
    #####:  330:            DIR * dir = opendir(temp) ;
call    0 never executed
    #####:  331:            if (dir) { // if a directory exists
branch  0 never executed
branch  1 never executed
    #####:  332:                closedir(dir) ;
call    0 never executed
    #####:  333:            } else if (errno == ENOENT) { // if a directory does not exist
branch  0 never executed
branch  1 never executed
    #####:  334:                if (mkdir(temp, 0776) == -1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  335:                    fprintf(stderr, "Failed to make a new directory %s!\n", temp) ;
call    0 never executed
    #####:  336:                    free(temp) ;
    #####:  337:                    return ;
        -:  338:                }
        -:  339:            }
        -:  340:        }
        -:  341:    }
    #####:  342:    free(temp) ;
        -:  343:}
        -:  344:
        -:  345:void
function receive_get_response called 0 returned 0% blocks executed 0%
    #####:  346:receive_get_response(int sock_fd)
    #####:  347:{
        -:  348:    int received ;
    #####:  349:    if ((received = recv(sock_fd, &sh, sizeof(sh), 0)) != sizeof(sh)) { // receive server header
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  350:        perror("receive server header error : ") ;
call    0 never executed
    #####:  351:        return ;
        -:  352:    } 
    #####:  353:    if (sh.is_error != 0) {
branch  0 never executed
branch  1 never executed
    #####:  354:        perror("response error : ") ;
call    0 never executed
    #####:  355:        return ;
        -:  356:    }
    #####:  357:    int file_len = strlen(dest_dir) + 1 + strlen(basename(file_path)) + 1 ;
call    0 never executed
    #####:  358:    char * file_towrite = (char *) malloc(file_len) ;
    #####:  359:    snprintf(file_towrite, file_len, "%s/%s", dest_dir, basename(file_path)) ;
call    0 never executed
    #####:  360:    make_directory(file_towrite) ;
call    0 never executed
    #####:  361:    FILE * fp = fopen(file_towrite, "wb") ;
call    0 never executed
    #####:  362:    if (fp == NULL) {
branch  0 never executed
branch  1 never executed
    #####:  363:        fprintf(stderr, "Failed to open a file %s!\n", file_towrite) ;
call    0 never executed
    #####:  364:        free(file_towrite) ;
    #####:  365:        return ;
        -:  366:    }
    #####:  367:    char buf[buf_size] ;
    #####:  368:    while ((received = recv(sock_fd, buf, buf_size, 0)) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:        if (fwrite(buf, 1, received, fp) < 0) {
call    0 never executed
        -:  370:            fprintf(stderr, "Failed to write a file %s!\n", file_towrite) ;
        -:  371:            free(file_towrite) ;
        -:  372:            fclose(fp) ;
        -:  373:            return ;
        -:  374:        }
        -:  375:    }
        -:  376:
    #####:  377:    printf(">> Writing %s succesfully completed!\n", file_towrite) ;
call    0 never executed
        -:  378:
    #####:  379:    free(file_towrite) ;
    #####:  380:    fclose(fp) ;
call    0 never executed
        -:  381:}
        -:  382:
        -:  383:void
function receive_put_response called 0 returned 0% blocks executed 0%
    #####:  384:receive_put_response(int sock_fd) 
        -:  385:{
        -:  386:    int received ;
    #####:  387:    if ((received = recv(sock_fd, &sh, sizeof(sh), 0)) != sizeof(sh)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  388:        perror("receive error : ") ;
call    0 never executed
    #####:  389:        return ;
        -:  390:    }
    #####:  391:    if (sh.is_error != 0) {
branch  0 never executed
branch  1 never executed
    #####:  392:        perror("response error : ") ;
call    0 never executed
    #####:  393:        return ;
        -:  394:    }
    #####:  395:    printf(">> Writing %s on server succesfully completed!\n", basename(file_path)) ;
call    0 never executed
call    1 never executed
        -:  396:}
        -:  397:
        -:  398:void
function receive_response called 0 returned 0% blocks executed 0%
    #####:  399:receive_response(int sock_fd)
        -:  400:{
    #####:  401:    if (ch.command == list)
branch  0 never executed
branch  1 never executed
    #####:  402:        receive_list_response(sock_fd) ;
call    0 never executed
    #####:  403:    else if (ch.command == get) 
branch  0 never executed
branch  1 never executed
    #####:  404:        receive_get_response(sock_fd) ;
call    0 never executed
        -:  405:    else // ch.command == put
    #####:  406:        receive_put_response(sock_fd) ;
call    0 never executed
    #####:  407:}
        -:  408:
        -:  409:#ifdef MAIN
        -:  410:int
        -:  411:main(int argc, char * argv[])
        -:  412:{
        -:  413:    get_option(argc, argv) ;
        -:  414:    
        -:  415:    /* Connect socket */
        -:  416:
        -:  417:    int sock_fd = socket(AF_INET, SOCK_STREAM, 0) ;
        -:  418:    if (sock_fd <= 0) {
        -:  419:        perror("socket failed : ") ;
        -:  420:        exit(EXIT_FAILURE) ;
        -:  421:    }
        -:  422:
        -:  423:    struct sockaddr_in serv_addr ;
        -:  424:    memset(&serv_addr, '\0', sizeof(serv_addr)) ;
        -:  425:    serv_addr.sin_family = AF_INET ;
        -:  426:    serv_addr.sin_port = htons(port_num) ;
        -:  427:    if (inet_pton(AF_INET, hostip, &serv_addr.sin_addr) <= 0) {
        -:  428:        perror("inet_pton failed : ") ;
        -:  429:        exit(EXIT_FAILURE) ;
        -:  430:    }
        -:  431:
        -:  432:    if (connect(sock_fd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
        -:  433:        perror("connect failed : ") ;
        -:  434:        exit(EXIT_FAILURE) ;
        -:  435:    }
        -:  436:
        -:  437:    
        -:  438:    /* Send the request to the server */
        -:  439:    
        -:  440:    request(sock_fd) ;
        -:  441:    shutdown(sock_fd, SHUT_WR) ;
        -:  442:
        -:  443:
        -:  444:    /* Receive response from the server */
        -:  445:
        -:  446:    receive_response(sock_fd) ;
        -:  447:
        -:  448:    // 이렇게 설정하니 receive_get_response 받기 전에 server 에서 sending 할 때 broken pipe error 뜸
        -:  449:    // if (ch.command == list) 
        -:  450:    //     receive_list_response(sock_fd) ;
        -:  451:    // else if (ch.command == put) 
        -:  452:    //     receive_get_response(sock_fd) ; 
        -:  453:    
        -:  454:    return 0 ;
        -:  455:}
        -:  456:
        -:  457:#endif
