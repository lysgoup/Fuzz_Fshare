        -:    0:Source:/home/s21900549/24-Fshare/yun/fshare.c
        -:    0:Graph:./CMakeFiles/fshare.dir/fshare.c.gcno
        -:    0:Data:./CMakeFiles/fshare.dir/fshare.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*  Client : request to the server and receive the response message
        -:    2:    $ ./fshare 192.168.0.1:8080 list
        -:    3:
        -:    4:    Server 로 request :
        -:    5:        - list          : send "list" + 0 + NULL
        -:    6:        - get hello.txt : send "get" + strlen("hello.txt") + NULL
        -:    7:        - put hi.txt    : send "put" + sizeof("hi.txt") + content of "hi.txt"
        -:    8:
        -:    9:    Server 로부터 다음과 같은 response message 를 받음 :
        -:   10:        - list : receives files 의 directory 안의 내용 > print
        -:   11:        - get hello.txt
        -:   12:            - receives 오류 없음 > 끝
        -:   13:            - receives 오류 있음 > 오류 메시지 print
        -:   14:        - put hi.txt
        -:   15:            - receives 오류 없음 > 끝
        -:   16:            - receives 오류 있음 > 오류 메시지 print
        -:   17:*/ 
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:#include <stdlib.h>
        -:   21:#include <string.h>
        -:   22:#include <unistd.h>
        -:   23:#include <sys/socket.h>
        -:   24:#include <netinet/in.h>
        -:   25:#include <arpa/inet.h>
        -:   26:#include <fcntl.h>
        -:   27:#include <dirent.h>
        -:   28:#include <sys/stat.h>
        -:   29:#include <libgen.h>
        -:   30:#include <errno.h>
        -:   31:#include "fshare.h"
        -:   32:
        -:   33:char * cmd_str[N_cmd] = {
        -:   34:	"list",
        -:   35:    "get",
        -:   36:    "put"
        -:   37:} ;
        -:   38:
        -:   39:char * recv_payload = 0x0 ;
        -:   40:char * send_payload = 0x0 ;
        -:   41:
        -:   42:client_header ch ;
        -:   43:server_header sh ;
        -:   44:
        -:   45:char * hostip = 0x0 ;
        -:   46:int port_num = -1 ;
        -:   47:char * file_path = 0x0 ;
        -:   48:char * dest_dir = 0x0 ;
        -:   49:
        -:   50:const int buf_size = 512 ;
        -:   51:
        -:   52:int 
function send_bytes called 0 returned 0% blocks executed 0%
    #####:   53:send_bytes(int fd, char * buf, size_t len)
        -:   54:{
        -:   55:    // return 0 if all given bytes are succesfully sent
        -:   56:    // return 1 otherwise
        -:   57:
    #####:   58:    char * p = buf ;
    #####:   59:    size_t acc = 0 ;
        -:   60:
    #####:   61:    while (acc < len)
branch  0 never executed
branch  1 never executed
        -:   62:    {
        -:   63:        size_t sent ;
    #####:   64:        sent = send(fd, p, len - acc, 0) ;
call    0 never executed
    #####:   65:        if (sent == -1)
branch  0 never executed
branch  1 never executed
    #####:   66:                return 1 ;
    #####:   67:        p += sent ;
    #####:   68:        acc += sent ;
        -:   69:    }
    #####:   70:    return 0 ;
        -:   71:}
        -:   72:
        -:   73:cmd
function get_cmd_code called 1 returned 100% blocks executed 86%
        1:   74:get_cmd_code (char * s)
        -:   75:{
        3:   76:	for (int i = 0 ; i < N_cmd ; i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        3:   77:	 	if (strcmp(s, cmd_str[i]) == 0) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   78:			return i ;
        -:   79:		}
        -:   80:	}
    #####:   81:	return N_cmd ;
        -:   82:}
        -:   83:
        -:   84:void 
function print_usage called 0 returned 0% blocks executed 0%
    #####:   85:print_usage() 
        -:   86:{
    #####:   87:    printf("Usage: ./fshare <host-ip:port-number> <command> <filepath (if necessary)>\n");
call    0 never executed
    #####:   88:}
        -:   89:
        -:   90:void
function get_option called 1 returned 100% blocks executed 51%
        1:   91:get_option(int argc, char * argv[])
        -:   92:{
        -:   93:    // parse the command-line argument and assign values
        -:   94:
        -:   95:    // fshare <host-ip:port-num> <command> <file_path> <directory-name>
        -:   96:    // fshare 192.168.0.1:8080 list
        -:   97:    // fshare 192.168.0.1:8080 get hello.txt ./dest
        -:   98:    // fshare 192.168.0.1:8080 put hi.txt
        -:   99:    int option ;
        2:  100:    while ((option = getopt(argc, argv, "h")) != -1) { 
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
    #####:  101:        switch (option) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####:  102:            case 'h':
    #####:  103:                print_usage() ;
call    0 never executed
    #####:  104:                return ;
    #####:  105:            case '?':
    #####:  106:                fprintf(stderr, "Unknown option -%c.\n", optopt) ;
call    0 never executed
    #####:  107:                return ;
        -:  108:        }
        -:  109:    }
        -:  110:
        1:  111:    if (argc < 3) { // at least two argument is required : <host-ip:port-number> <command>
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  112:        print_usage();
call    0 never executed
    #####:  113:        return;
        -:  114:    }
        -:  115:
        -:  116:    // extract IP address and port from <host-ip:port-number>
        1:  117:    char * host_port = argv[optind] ; 
        1:  118:    char * colon_ptr = strchr(host_port, ':') ; // find the position of the colon
        1:  119:    if (colon_ptr == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  120:        fprintf(stderr, "Invalid format for <host-ip:port-number>.\n") ;
call    0 never executed
    #####:  121:        print_usage() ;
call    0 never executed
    #####:  122:        return ;
        -:  123:    }
        1:  124:    * colon_ptr = '\0'; // replace the colon with null-terminator to separate IP and port strings
        -:  125:
        -:  126:    // get host IP
        1:  127:    hostip = strdup(host_port) ;
        -:  128:    
        -:  129:    // get port number
        1:  130:    port_num = atoi(colon_ptr + 1);
        1:  131:    if (port_num < 1023 || port_num > 49151) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  132:        fprintf(stderr, "Range of port number should be [1024, 49150]\n") ;
call    0 never executed
    #####:  133:        return ;
        -:  134:    }
        -:  135:    
        -:  136:    // get and set user-command
        1:  137:    char * user_command = argv[optind + 1] ; 
        1:  138:    if ((ch.command = get_cmd_code(user_command)) == N_cmd) { // set command on the header
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  139:        fprintf(stderr, "Wrong command.\n") ;
call    0 never executed
    #####:  140:        return ;
        -:  141:    }
        -:  142:    // set file path and destination directory 
        1:  143:    if (ch.command == get || ch.command == put) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  144:        file_path = (char *) malloc(strlen(argv[optind + 2]) + 1) ;
        1:  145:        if (file_path == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  146:            fprintf(stderr, "Failed to allocate a memory...\n") ;
call    0 never executed
    #####:  147:            return ;
        -:  148:        }
        1:  149:        strcpy(file_path, argv[optind + 2]) ;
        1:  150:        file_path[strlen(argv[optind + 2])] = '\0' ;
        -:  151:        
        1:  152:        dest_dir = (char *) malloc(strlen(argv[optind + 3]) + 1) ;
        1:  153:        if (dest_dir == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  154:            fprintf(stderr, "Failed to allocate a memory...\n") ;
call    0 never executed
    #####:  155:            return ;
        -:  156:        }
        1:  157:        strcpy(dest_dir, argv[optind + 3]) ;
        1:  158:        dest_dir[strlen(argv[optind + 3])] = '\0' ;
        -:  159:    }
        -:  160:
        -:  161:    // check if options were provided
        1:  162:    if (hostip == NULL || port_num == -1 || user_command == NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  163:        print_usage() ;
call    0 never executed
    #####:  164:        return ;
        -:  165:    }
        -:  166:
        1:  167:    if (ch.command == get || ch.command == put) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  168:        if (file_path == NULL || dest_dir == NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  169:            print_usage() ;
call    0 never executed
    #####:  170:            return ;
        -:  171:        }
        -:  172:    }
        -:  173:
        1:  174:    return ;
        -:  175:}
        -:  176:
        -:  177:char *
function parse_directory called 0 returned 0% blocks executed 0%
    #####:  178:parse_directory(char * toparse) 
        -:  179:{
    #####:  180:    char * parsed_dir = dirname(toparse) ;
call    0 never executed
    #####:  181:    return parsed_dir ;
        -:  182:}
        -:  183:
        -:  184:void 
function request called 1 returned 100% blocks executed 45%
        1:  185:request(const int sock_fd)
        -:  186:{
        -:  187:    /*  TASK : header + payload 설정하고 server 에 send
        -:  188:        - list                : send "list" + 0 + 0 + NULL
        -:  189:        - get a/hello.txt b/c : send "get" + strlen("a/hello.txt") + strlen(b/c) + a/hello.txt
        -:  190:        - put x/hi.txt y/z    : send "put" + sizeof("x/hi.txt") + content of "x/hi.txt"
        -:  191:    */
        -:  192:    int sent ;
        1:  193:    int sent_check = sizeof(ch) ;
        1:  194:    char * chp = (char *) &ch ;
        -:  195:    char * ptr ;
        -:  196:
        1:  197:    if (ch.command == list) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  198:        ch.payload_size = 0 ;
    #####:  199:        ch.src_path_len = 0 ;
    #####:  200:        ch.des_path_len = 0 ;
    #####:  201:        while (sent_check > 0 && (sent = send(sock_fd, chp, sent_check, 0)) > 0) { // send header
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  202:            chp += sent ;
    #####:  203:            sent_check -= sent ;
        -:  204:        } 
    #####:  205:        printf(">> List request completed!\n") ;
call    0 never executed
        1:  206:    } else if (ch.command == get) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  207:        ch.src_path_len = strlen(file_path) ;
    #####:  208:        ch.des_path_len = 0 ;
    #####:  209:        ch.payload_size = ch.src_path_len + ch.des_path_len ;
    #####:  210:        while (sent_check > 0 && (sent = send(sock_fd, &ch, sent_check, 0)) > 0) { // send header
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  211:            chp += sent ;
    #####:  212:            sent_check -= sent ;
        -:  213:        }
    #####:  214:        sent_check = ch.payload_size ;
    #####:  215:        ptr = file_path ;
    #####:  216:        while (sent_check > 0 && (sent = send(sock_fd, file_path, sent_check, 0)) > 0) { // send payload
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  217:            ptr += sent ;
    #####:  218:            sent_check -= sent ;
        -:  219:        }
    #####:  220:        printf(">> Get request completed!\n") ;
call    0 never executed
        -:  221:    } else { // ch.command == put
        1:  222:        ch.src_path_len = strlen(file_path) ;
        1:  223:        ch.des_path_len = strlen(dest_dir) ;
        -:  224:
        -:  225:        struct stat filestat ;
        1:  226:        if (lstat(file_path, &filestat) == -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  227:            fprintf(stderr, "Failed to get a file status of %s\n", file_path) ;
call    0 never executed
    #####:  228:            return ;
        -:  229:        }
        1:  230:        ch.payload_size = ch.src_path_len + ch.des_path_len + filestat.st_size ;
        -:  231:        
        1:  232:        FILE * fp = fopen(file_path, "rb") ;
call    0 returned 100%
        1:  233:        if (fp == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  234:            fprintf(stderr, "Failed to open a file %s\n", file_path) ;
call    0 never executed
    #####:  235:            return ;
        -:  236:        }
        -:  237:        
        3:  238:        while (sent_check > 0 && 0 < (sent = send(sock_fd, &ch, sent_check, 0))) { // send header
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
        1:  239:            chp += sent ;
        1:  240:            sent_check -= sent ;
        -:  241:        } 
        -:  242:
        1:  243:        send_payload = (char *) malloc(ch.src_path_len + ch.des_path_len + 1) ;
        1:  244:        strcpy(send_payload, file_path) ;
        1:  245:        strcat(send_payload, dest_dir) ;
        -:  246:
        1:  247:        ptr = send_payload ;
        1:  248:        sent_check = ch.src_path_len + ch.src_path_len ;
        3:  249:        while (sent_check > 0 && 0 < (sent = send(sock_fd, send_payload, sent_check, 0))) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
        1:  250:            ptr += sent ;
        1:  251:            sent_check -= sent ;
        -:  252:        }
        -:  253:
        1:  254:        char buf[buf_size] ;
        -:  255:        int read_size ;
        2:  256:        while ((read_size = fread(buf, 1, buf_size, fp)) > 0) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
    #####:  257:            if ((sent = send(sock_fd, buf, read_size, 0)) < 0) { // send payload
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  258:                perror("send error file data : ") ;
call    0 never executed
    #####:  259:                fclose(fp) ;
call    0 never executed
    #####:  260:                return ;
        -:  261:            }
        -:  262:        }
        -:  263:
        1:  264:        free(send_payload) ;
        1:  265:        fclose(fp) ;
call    0 returned 100%
        1:  266:        printf(">> Put request completed!\n") ;
call    0 returned 100%
        -:  267:    }
        -:  268:}
        -:  269:
        -:  270:void
function receive_list_response called 0 returned 0% blocks executed 0%
    #####:  271:receive_list_response(int sock_fd) 
        -:  272:{
        -:  273:    // receiving can be done multiple times
        -:  274:    int received ;
    #####:  275:    do {
    #####:  276:        if ((received = recv(sock_fd, &sh, sizeof(sh), 0)) != sizeof(sh)) { // receive server header
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  277:            if (received == 0) {
branch  0 never executed
branch  1 never executed
    #####:  278:                continue ;
        -:  279:            }
    #####:  280:            perror("receive error : ") ;
call    0 never executed
    #####:  281:            return ;
        -:  282:        }
    #####:  283:        if (sh.is_error != 0) {
branch  0 never executed
branch  1 never executed
    #####:  284:            perror("response error : ") ;
call    0 never executed
    #####:  285:            return ;
        -:  286:        }
        -:  287:        
    #####:  288:        char buf[buf_size] ;
    #####:  289:        int len = 0 ;
        -:  290:
    #####:  291:        if (sh.payload_size <= buf_size) {
branch  0 never executed
branch  1 never executed
    #####:  292:            if ((received = recv(sock_fd, buf, sh.payload_size, 0)) != sh.payload_size) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  293:                perror("receive error 2 : ") ;
call    0 never executed
    #####:  294:                return ;
        -:  295:            }
    #####:  296:            buf[sh.payload_size] = '\0' ;
    #####:  297:            printf("> %s\n", buf) ;
call    0 never executed
        -:  298:        } else {
    #####:  299:            while ((received = recv(sock_fd, buf, buf_size, 0)) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  300:                if (recv_payload == 0x0) {
branch  0 never executed
branch  1 never executed
    #####:  301:                    recv_payload = (char *) malloc(received) ;
    #####:  302:                    memcpy(recv_payload, buf, received) ;
    #####:  303:                    len = received ;
        -:  304:                } else {
    #####:  305:                    recv_payload = realloc(recv_payload, len + received) ;
    #####:  306:                    memcpy(recv_payload + len, buf, received) ;
    #####:  307:                    len += received ;
        -:  308:                }
        -:  309:            }
    #####:  310:            buf[ch.payload_size] = '\0' ;
    #####:  311:            printf("> %s\n", recv_payload) ;
call    0 never executed
    #####:  312:            free(recv_payload) ;
        -:  313:        }
    #####:  314:    } while (received > 0) ;
branch  0 never executed
branch  1 never executed
        -:  315:}
        -:  316:
        -:  317:void
function make_directory called 0 returned 0% blocks executed 0%
    #####:  318:make_directory(char * towrite) 
        -:  319:{
    #####:  320:    char * temp = (char *) malloc(strlen(towrite) + 1) ;
        -:  321:
    #####:  322:    for (int i = 0; i <= strlen(towrite); i++) {
branch  0 never executed
branch  1 never executed
    #####:  323:        if (towrite[i] == '/') {
branch  0 never executed
branch  1 never executed
    #####:  324:            strncpy(temp, towrite, i) ;
    #####:  325:            temp[i] = '\0' ;
    #####:  326:            printf("dir : %s\n", temp) ; 
call    0 never executed
        -:  327:
    #####:  328:            DIR * dir = opendir(temp) ;
call    0 never executed
    #####:  329:            if (dir) { // if a directory exists
branch  0 never executed
branch  1 never executed
    #####:  330:                closedir(dir) ;
call    0 never executed
    #####:  331:            } else if (errno == ENOENT) { // if a directory does not exist
branch  0 never executed
branch  1 never executed
    #####:  332:                if (mkdir(temp, 0776) == -1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  333:                    fprintf(stderr, "Failed to make a new directory %s!\n", temp) ;
call    0 never executed
    #####:  334:                    free(temp) ;
    #####:  335:                    return ;
        -:  336:                }
        -:  337:            }
        -:  338:        }
        -:  339:    }
    #####:  340:    free(temp) ;
        -:  341:}
        -:  342:
        -:  343:void
function receive_get_response called 0 returned 0% blocks executed 0%
    #####:  344:receive_get_response(int sock_fd)
    #####:  345:{
        -:  346:    int received ;
    #####:  347:    if ((received = recv(sock_fd, &sh, sizeof(sh), 0)) != sizeof(sh)) { // receive server header
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  348:        perror("receive server header error : ") ;
call    0 never executed
    #####:  349:        return ;
        -:  350:    } 
    #####:  351:    if (sh.is_error != 0) {
branch  0 never executed
branch  1 never executed
    #####:  352:        perror("response error : ") ;
call    0 never executed
    #####:  353:        return ;
        -:  354:    }
        -:  355:    
    #####:  356:    int file_len = strlen(dest_dir) + 1 + strlen(basename(file_path)) + 1 ;
call    0 never executed
    #####:  357:    char * file_towrite = (char *) malloc(file_len) ;
    #####:  358:    snprintf(file_towrite, file_len, "%s/%s", dest_dir, basename(file_path)) ;
call    0 never executed
        -:  359:
    #####:  360:    make_directory(file_towrite) ;
call    0 never executed
        -:  361:
    #####:  362:    FILE * fp = fopen(file_towrite, "wb") ;
call    0 never executed
    #####:  363:    if (fp == NULL) {
branch  0 never executed
branch  1 never executed
    #####:  364:        fprintf(stderr, "Failed to open a file %s!\n", file_towrite) ;
call    0 never executed
    #####:  365:        free(file_towrite) ;
    #####:  366:        return ;
        -:  367:    }
        -:  368:
    #####:  369:    char buf[buf_size] ;
    #####:  370:    while ((received = recv(sock_fd, buf, buf_size, 0)) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  371:        if (fwrite(buf, 1, received, fp) < 0) {
call    0 never executed
        -:  372:            fprintf(stderr, "Failed to write a file %s!\n", file_towrite) ;
        -:  373:            free(file_towrite) ;
        -:  374:            fclose(fp) ;
        -:  375:            return ;
        -:  376:        }
        -:  377:    }
        -:  378:
    #####:  379:    printf(">> Writing %s succesfully completed!\n", file_towrite) ;
call    0 never executed
        -:  380:
    #####:  381:    free(file_towrite) ;
    #####:  382:    fclose(fp) ;
call    0 never executed
        -:  383:}
        -:  384:
        -:  385:void
function receive_put_response called 0 returned 0% blocks executed 0%
    #####:  386:receive_put_response(int sock_fd) 
        -:  387:{
        -:  388:    int received ;
    #####:  389:    if ((received = recv(sock_fd, &sh, sizeof(sh), 0)) != sizeof(sh)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  390:        perror("receive error : ") ;
call    0 never executed
    #####:  391:        return ;
        -:  392:    }
    #####:  393:    if (sh.is_error != 0) {
branch  0 never executed
branch  1 never executed
    #####:  394:        perror("response error : ") ;
call    0 never executed
    #####:  395:        return ;
        -:  396:    }
    #####:  397:    printf(">> Writing %s on server succesfully completed!\n", basename(file_path)) ;
call    0 never executed
call    1 never executed
        -:  398:}
        -:  399:
        -:  400:void
function receive_response called 0 returned 0% blocks executed 0%
    #####:  401:receive_response(int sock_fd)
        -:  402:{
    #####:  403:    if (ch.command == list)
branch  0 never executed
branch  1 never executed
    #####:  404:        receive_list_response(sock_fd) ;
call    0 never executed
    #####:  405:    else if (ch.command == get) 
branch  0 never executed
branch  1 never executed
    #####:  406:        receive_get_response(sock_fd) ;
call    0 never executed
        -:  407:    else // ch.command == put
    #####:  408:        receive_put_response(sock_fd) ;
call    0 never executed
    #####:  409:}
        -:  410:
        -:  411:#ifdef MAIN
        -:  412:int
        -:  413:main(int argc, char * argv[])
        -:  414:{
        -:  415:    get_option(argc, argv) ;
        -:  416:    
        -:  417:    /* Connect socket */
        -:  418:
        -:  419:    int sock_fd = socket(AF_INET, SOCK_STREAM, 0) ;
        -:  420:    if (sock_fd <= 0) {
        -:  421:        perror("socket failed : ") ;
        -:  422:        exit(EXIT_FAILURE) ;
        -:  423:    }
        -:  424:
        -:  425:    struct sockaddr_in serv_addr ;
        -:  426:    memset(&serv_addr, '\0', sizeof(serv_addr)) ;
        -:  427:    serv_addr.sin_family = AF_INET ;
        -:  428:    serv_addr.sin_port = htons(port_num) ;
        -:  429:    if (inet_pton(AF_INET, hostip, &serv_addr.sin_addr) <= 0) {
        -:  430:        perror("inet_pton failed : ") ;
        -:  431:        exit(EXIT_FAILURE) ;
        -:  432:    }
        -:  433:
        -:  434:    if (connect(sock_fd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
        -:  435:        perror("connect failed : ") ;
        -:  436:        exit(EXIT_FAILURE) ;
        -:  437:    }
        -:  438:
        -:  439:    
        -:  440:    /* Send the request to the server */
        -:  441:    
        -:  442:    request(sock_fd) ;
        -:  443:    shutdown(sock_fd, SHUT_WR) ;
        -:  444:
        -:  445:
        -:  446:    /* Receive response from the server */
        -:  447:
        -:  448:    receive_response(sock_fd) ;
        -:  449:
        -:  450:    // 이렇게 설정하니 receive_get_response 받기 전에 server 에서 sending 할 때 broken pipe error 뜸
        -:  451:    // if (ch.command == list) 
        -:  452:    //     receive_list_response(sock_fd) ;
        -:  453:    // else if (ch.command == put) 
        -:  454:    //     receive_get_response(sock_fd) ; 
        -:  455:    
        -:  456:    return 0 ;
        -:  457:}
        -:  458:
        -:  459:#endif
